// Copyright 2017, University of Freiburg,
// Chair of Algorithms and Data Structures.
// Author: Hannah Bast <bast@cs.uni-freiburg.de>,
//         Axel Lehmann <lehmann@cs.uni-freiburg.de>.

// NOTE: this is a code design suggestion in pseudo-code. It is not supposed to
// be compilable in any language. You have to translate it to Python, Java or 
// C++ yourself. The purpose of this file is to suggest a basic design and 
// settle questions you might have on what exactly your code is supposed to do.

// Implementation of a fixed-size HashMap, as explained in lecture 4a + 4b. 
// This hash map only allows strings as keys and integers as values. You may 
// assume, that the size of the hash table is given on initialization. For 
// collision resolution, you are allowed to use one of:
// - open addressing ("offene Addressierung")
// - seperate chaining ("Hashing mit Verkettung")
// - cuckoo hashing ("Kuckuck Hashing") [Advanced!]
class HashMap {
  // PUBLIC MEMBERS
  
  // Insert the given key (given as a string) with the given value (given as 
  // an integer). If the hash table already contains an entry for the given key, 
  // update the value of this entry with the given value.
  void insert(String key, int value);

  // Check if there exists an entry with the given key in the hash table. 
  // If such an entry exists, return its associated integer value. 
  // Otherwise return -1.
  int lookup(String key);


  // Return all elements in the array as a single list of pairs where key is the
  // first element and value the second.
  Array<Pair<String, int>> getKeyValuePairs();
}
