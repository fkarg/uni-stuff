// Copyright 2017, University of Freiburg,
// Chair of Algorithms and Data Structures.
// Author: Hannah Bast <bast@cs.uni-freiburg.de>

// NOTE: this is a code design suggestion in pseudo-code. It is not supposed to
// be compilable in any language. You have to translate it to Python, Java or
// C++ yourself. The purpose of this file is to suggest a basic design and
// settle questions you might have on what exactly your code is supposed to do.

// Class for computing a histogram of the collision probabilities for each of
// the five classes of hash functions dicsussed in Vorlesung 5b.
class UniversalHashing {
  // PRIVATE MEMBERS

  // The size m of the hash table and the universe u and a prime p > u.
  int m;
  int u;
  int p;

  // PUBLIC MEMBERS

  // Collision proability of two given keys x and y for the hash class discussed
  // in Vorlesung 5b. To get full points, it is enough if you implement four out
  // of five. But feel free to implement all five if you feel up to it.
  //
  // To compute the probability, just iterate over all hash functions h in the
  // class and count how often h(x) = h(y). The collision probability is then
  // simply the number of times this happens divided by the number of hash
  // function in the class. Note the for class 2, there are too many hash
  // functions to iterate over; but for this class, we know the precise
  // collision probability and can just return that.
  double collision_probability_class_1(int x, int y);
  double collision_probability_class_2(int x, int y);
  double collision_probability_class_3(int x, int y);
  double collision_probability_class_4(int x, int y);
  double collision_probability_class_5(int x, int y);

  // Return histogram counts for all collision probabilites (for all pairs of
  // keys x and y with x != y) for a hash function class. Arguments are the
  // function for computing the collision probability for a given pair and the
  // number of buckets. The function should return an array with the counts for
  // each bucket. For example, to get the histogram for class 1 with 256
  // buckets, call the function like this:
  //
  // collision_probabilities_histogram(collision_probability_class_1, 256)
  //
  // Understand that the sum of the histogram counts should be the number of
  // pairs of keys x and y with x != y. This number is u * (u - 1). We recommend
  // to use this in your unit test.
  Array<int> collision_probabilities_histogram(collision_probability_function,
                                               num_buckets);
}
