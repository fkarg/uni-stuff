// Copyright 2017, University of Freiburg,
// Chair of Algorithms and Data Structures.
// Authors: Axel Lehmann <lehmann@cs.uni-freiburg.de>
//          Hannah Bast <bast@cs.uni-freiburg.de>

// NOTE: this is a code design suggestion in pseudo-code. It is not supposed to
// be compilable in any language. You have to translate it to Python, Java or
// C++ yourself. The purpose of this file is to suggest a basic design and
// settle questions you might have on what exactly your code is supposed to do.

// Implementation of iterative MergeSort, as explained in Vorlesung 1b.
class MergeSort {
  // PUBLIC MEMBERS

  // Sort using the iterative MergeSort algorithm, as explained in Vorlesung 1b.
  void mergeSort(Array<int> array);

  // PRIVATE MEMBERS

  // Merges the two sorted subarrays array[left..middle-1] and
  // array[middle..right], and writes the result to array[left..right].
  // Use the algorithm explained in Vorlesung 1b.
  void merge(Array<int> array, int left, int middle, int right);
}
